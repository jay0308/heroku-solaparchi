{"version":3,"sources":["logo.svg","PlayGround.js","App.js","LoginComponent.js","serviceWorker.js","index.js"],"names":["module","exports","PlayGround","props","sendRequestToPlayer","playerId","socket","emit","from","JSON","parse","localStorage","getItem","email","to","selectCard","txt","ind","setState","selectCardInd","selectCardTxt","sendCard","cardTxt","state","cardIndex","renderActiveUserCard","usr","className","onClick","renderActiveUsers","activeUsers","map","e","renderGamePanel","playersInGame","gameTurn","i","next","turn","cards","ele","index","this","startGame","React","Component","App","setOnlineUsers","userList","userEmail","onlineUsers","push","sendMsg","refs","chatTxtBox","value","setTab","tabNo","activeTab","openCnfrmModal","showConfrmModal","closeCnfrmModal","acceptRequest","data","acceptId","requestId","requestData","rejectRequest","rejectId","renderLoginScreen","type","placeholder","ref","addUser","renderAfterLogin","renderOnlineUsers","key","renderChatWindow","chatText","renderTabs","renderCnfrmModal","isUserLoggedin","isStartGame","io","replace","on","console","log","arr","error","alert","players","close","ajaxCall","args","url","method","toLowerCase","axios","LoginComponent","reqObj","then","res","setItem","stringify","catch","err","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c184cb71.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\n\nclass PlayGround extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            selectCardTxt:\"\",\n            selectCardInd:\"\"\n        }\n    }\n\n    sendRequestToPlayer = (playerId) => {\n        const { socket } = this.props;\n        socket.emit('playerRequest', {\n            from: JSON.parse(localStorage.getItem('userDetail')).email,\n            to: playerId\n        })\n    }\n\n    selectCard = (txt,ind) => {\n        this.setState({\n            selectCardInd:ind,\n            selectCardTxt:txt\n        })\n    }\n\n    sendCard = () => {\n        this.props.socket.emit('userMove',{\n            email:JSON.parse(localStorage.getItem('userDetail')).email,\n            cardTxt:this.state.selectCardTxt,\n            cardIndex:this.state.selectCardInd\n        })\n    }\n\n    renderActiveUserCard = (usr) => {\n        return (\n            <div className=\"activeUsrCard\">\n                <span className=\"usrName\">\n                    Let's play with <br /> <b>{usr}</b>\n                </span>\n                <button onClick={() => { this.sendRequestToPlayer(usr) }}>Send Request</button>\n            </div>\n        )\n    }\n    renderActiveUsers = () => {\n        const { activeUsers } = this.props\n        return (\n            <div className=\"activeUsers\">\n                {\n                    activeUsers &&\n                    activeUsers.map(e => {\n                        return this.renderActiveUserCard(e)\n                    })\n                }\n            </div>\n        )\n    }\n    renderGamePanel = () => {\n        const { playersInGame,gameTurn } = this.props\n        return (\n            <div className=\"gamePanel\">\n                <div className=\"playersInGame\">\n                    <h2>Players in game</h2>\n                    {\n                        playersInGame &&\n                        playersInGame.map((e,i) => {\n                            return <span>\n                                <span>{e.email}</span>\n                                {gameTurn && <span className=\"next\">{gameTurn.next === e.email ? \"Next\" : \"\"}</span>}\n                                {gameTurn && <span className=\"turn\">{gameTurn.turn === e.email? \"Turn\" : \"\"}</span>}\n                            </span> \n                        })\n                    }\n                </div>\n                <div className=\"cards\">\n                    <h2>Your Cards</h2>\n                    {\n                            playersInGame &&\n                            playersInGame.map((e) => {\n                                if(e.email === JSON.parse(localStorage.getItem('userDetail')).email){\n                                    return e.cards.map((ele,index)=>{\n                                        return (                                            \n                                            <div className={\"gameCard \"+(this.state.selectCardInd === index ? \"selected\" : \"\")} onClick={()=>{this.selectCard(ele,index)}}>\n                                                {ele}\n                                            </div>\n                                        )\n                                    })\n                                }\n                            })\n                        }\n                </div>\n                {\n                    gameTurn &&\n                    gameTurn.turn === JSON.parse(localStorage.getItem('userDetail')).email &&\n                    <div className=\"sendCard\">\n                        <button className=\"send-card-btn\" onClick={this.sendCard}>Send Card</button>\n                    </div>\n                }\n            </div>\n        )\n    }\n    render() {\n        return (\n            <div className=\"playground\">\n                {\n                    !this.props.startGame ?\n                        this.renderActiveUsers()\n                        :\n                        this.renderGamePanel()\n                }\n            </div>\n        )\n    }\n}\n\nexport default PlayGround;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport io from 'socket.io-client';\nimport axios from 'axios';\nimport PlayGround from './PlayGround';\n\n// let socket = io('http://localhost:4000');\n\nconst ajaxCall = (args) => {\n  let url = \"http://localhost:4000\" + args.url\n  if (args.method.toLowerCase() === 'get') {\n    return axios({\n      method: args.method,\n      url: url\n    })\n  } else if (args.method.toLowerCase() === 'post') {\n    return axios({\n      method: args.method,\n      url: url,\n      data: args.data\n    })\n  }\n}\n\n// const initSocket = () => {\n//   socket.on('connect', function(){\n//     console.log(\"client connected\")\n//   });\n\n// }\n\n// const sendMessage = () => {\n//   socket.emit('newMessage', { \n//     from:'jen@mds', \n//     text:'hepppp', \n//     createdAt:123 \n//   });\n// }\n\n// socket.on('serverMsg',function(data){\n//   console.log(data)\n// })\n// socket.on('disconnect', function(){});\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isUserLoggedin: localStorage.getItem('userDetail') ? true : false,\n      onlineUsers: null,\n      chatText:[],\n      activeTab:0,\n      showConfrmModal:false,\n      requestData:null,\n      isStartGame:false,\n      playersInGame:null,\n      gameTurn:null\n    }\n    this.socket = io('http://localhost:4000?email=' + (JSON.parse(localStorage.getItem('userDetail')).email.replace('@', '*')))\n  }\n\n\n  componentDidMount() {\n    this.socket.on('connect', () => {\n      console.log(\"You are connected\");\n    });\n\n    this.socket.on('connectedUser', (data) => {\n      console.log(data)\n      this.setOnlineUsers(data)\n    })\n\n    this.socket.on('serverMsg', (data) => {\n      let arr = this.state.chatText;\n      arr.push(data)\n      this.setState({\n        chatText:arr\n      })\n      console.log(data)\n    })\n\n    this.socket.on('playingRequest_'+JSON.parse(localStorage.getItem('userDetail')).email,(data)=>{\n      console.log('playing req',data)\n      this.setState({\n        requestData:data\n      })\n      this.openCnfrmModal()\n      // alert(data.from)\n    })\n\n    this.socket.on('acceptRequest_'+JSON.parse(localStorage.getItem('userDetail')).email,(data)=>{\n      console.log('acceptRequest_',data)\n      if(!data.error)\n        alert(\"accepted by \"+data.acceptId)\n      else\n        alert(data.error)\n      // alert(data.from)\n    })\n\n    this.socket.on('rejectRequest_'+JSON.parse(localStorage.getItem('userDetail')).email,(data)=>{\n      console.log('rejectRequest_',data)\n      alert(\"rejected by \"+data.rejectId)\n      // alert(data.from)\n    })\n\n    this.socket.on('startGame_'+JSON.parse(localStorage.getItem('userDetail')).email,(data)=>{\n      console.log('startGame_',data)\n      this.setState({\n        isStartGame:true,\n        playersInGame:data\n      })\n      // alert(data.from)\n    })\n\n    this.socket.on('gameTurn',(data)=>{\n      console.log('GameTurn',data)\n      this.setState({\n        gameTurn:data,\n        playersInGame:data.players\n      })\n    })\n\n    this.socket.on('playerWin',(data)=>{\n      alert(data + \" win\")\n    })\n  }\n\n  componentWillUnmount() {\n    this.socket.close()\n  }\n\n  setOnlineUsers = (userList) => {\n    let userEmail = JSON.parse(localStorage.getItem('userDetail')).email;\n    let onlineUsers = [];\n    userList.map((ele) => {\n      if (userEmail !== ele.email) {\n        onlineUsers.push(ele.email)\n      }\n    })\n    this.setState({\n      onlineUsers: onlineUsers\n    })\n  }\n\n  sendMsg = () => {\n    if(this.refs.chatTxtBox.value)\n      this.socket.emit('newMessage', JSON.parse(localStorage.getItem('userDetail')).email + \" says : \"+ this.refs.chatTxtBox.value);\n\n      this.refs.chatTxtBox.value = \"\"\n  }\n\n  setTab = (tabNo) => {\n    this.setState({\n      activeTab:tabNo\n    })\n  }\n\n  openCnfrmModal = () => {\n    this.setState({\n      showConfrmModal:true\n    })\n  }\n\n  closeCnfrmModal = () => {\n    this.setState({\n      showConfrmModal:false\n    })\n  }\n\n  acceptRequest = () => {\n    let userEmail = JSON.parse(localStorage.getItem('userDetail')).email\n    let data = {\n      acceptId:userEmail,\n      requestId:this.state.requestData.from\n    }\n    this.socket.emit('acceptRequest',data)\n    this.closeCnfrmModal()\n  }\n\n  rejectRequest = () => {\n    let userEmail = JSON.parse(localStorage.getItem('userDetail')).email\n    let data = {\n      rejectId:userEmail,\n      requestId:this.state.requestData.from\n    }\n    this.socket.emit('rejectRequest',data)\n    this.closeCnfrmModal()\n  }\n\n  renderLoginScreen = () => {\n    return (\n      <div className=\"loginScreen\">\n        <div className=\"loginScreenInner\">\n          <input type=\"text\" placeholder=\"Your Email\" ref=\"email\" />\n          <button className=\"getInBtn\" onClick={this.addUser}>Get In</button>\n        </div>\n      </div>\n    )\n  }\n\n  renderAfterLogin = () => {\n    let userEmail = JSON.parse(localStorage.getItem('userDetail')).email\n    return (\n      <div className=\"welcome-user\">\n        <h2>welcome {userEmail}</h2>\n      </div>\n    )\n  }\n\n  renderOnlineUsers = () => {\n    return (\n      <div className=\"onlineUsers\">\n        {/* <h2>Active users</h2> */}\n        {\n          this.state.onlineUsers.map((e) => {\n            return (\n              <div className=\"userList\" key={e}>{e}</div>\n            )\n          })\n        }\n      </div>\n    )\n  }\n\n  renderChatWindow = () => {\n    return(\n      <div className=\"chatWindow\">\n        <div className=\"chatBox\">\n          {\n            this.state.chatText.map((e,i)=>{\n            return <div key={i}>{e}</div>\n            })\n          }\n        </div>\n        <div className=\"chatAction\">\n          <input type=\"text\" ref=\"chatTxtBox\"/>\n          <button onClick={this.sendMsg}>send</button>\n        </div>\n      </div>\n    )\n  }\n\n  renderTabs = () => {\n    return(\n      <div className=\"tabCont\">\n        <span className={\"tab \"+(this.state.activeTab === 0 ? \"active\" : \"\")} onClick={()=>{this.setTab(0)}}>Chat</span>\n        <span className={\"tab \"+(this.state.activeTab === 1 ? \"active\" : \"\")} onClick={()=>{this.setTab(1)}}>Active</span>\n        <span className={\"tab \"+(this.state.activeTab === 2 ? \"active\" : \"\")} onClick={()=>{this.setTab(2)}}>Playground</span>\n      </div>\n    )\n  }\n\n  renderCnfrmModal = () => {\n    return(\n      <div className=\"cnfrmModal\">\n        <div className=\"cnfrmModalInner\">\n          <div className=\"modal-body\">\n            <b>{this.state.requestData.from}</b> <br/> has requested to play\n          </div>\n          <div className=\"modal-footer\">\n            <button className=\"accept-btn\" onClick={this.acceptRequest}>Accept</button>\n            <button className=\"ignore-btn\" onClick={this.rejectRequest}>Ignore</button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.isUserLoggedin ?\n            this.renderAfterLogin()\n            :\n            this.renderLoginScreen()\n        }\n        {\n          this.renderTabs()\n        }\n        {\n          this.state.activeTab === 0 &&\n          this.renderChatWindow()\n        }\n        {\n          this.state.activeTab === 1 &&\n          this.renderOnlineUsers()\n        }\n        {\n          this.state.activeTab === 2 &&\n          <PlayGround\n            socket = {this.socket}\n            activeUsers = {this.state.onlineUsers}\n            startGame = {this.state.isStartGame}\n            playersInGame = {this.state.playersInGame}\n            gameTurn = {this.state.gameTurn}\n          />\n        }\n        {\n          this.state.showConfrmModal &&\n          this.renderCnfrmModal()\n        }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport App from './App';\n\nconst ajaxCall = (args) => {\n  let url = \"http://localhost:4000\" + args.url\n  if (args.method.toLowerCase() === 'get') {\n    return axios({\n      method: args.method,\n      url: url\n    })\n  } else if (args.method.toLowerCase() === 'post') {\n    return axios({\n      method: args.method,\n      url: url,\n      data: args.data\n    })\n  }\n}\n\nclass LoginComponent extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {      \n      isUserLoggedin: localStorage.getItem('userDetail') ? true : false,\n    }\n  }\n  \n\n  \n\n  addUser = () => {\n    if (this.refs.email.value) {\n      let reqObj = {\n        method: \"post\",\n        url: \"/api/adduser\",\n        data: {\n          email: this.refs.email.value\n        }\n      }\n      ajaxCall(reqObj).then((res) => {\n        localStorage.setItem(\"userDetail\", JSON.stringify(res.data))\n        this.setState({\n          isUserLoggedin: true\n        })\n      }).catch((err) => {\n        alert(err.toString())\n      })\n    } else {\n      alert(\"PLease enter email\")\n    }\n  }\n\n\n  renderLoginScreen = () => {\n    return (\n      <div className=\"loginScreen\">\n        <div className=\"loginScreenInner\">\n          <input type=\"text\" placeholder=\"Your Email\" ref=\"email\" />\n          <button className=\"getInBtn\" onClick={this.addUser}>Get In</button>\n        </div>\n      </div>\n    )\n  }\n\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.isUserLoggedin ?\n            <App/>\n            :\n            this.renderLoginScreen()\n        }\n      </div>\n    )\n  }\n}\n\nexport default LoginComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LoginComponent from './LoginComponent';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<LoginComponent />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}